package auth

import "github.com/DenisBytes/GoTemplHTMXLoginTemplate/view/layout"

templ Login(){
    @layout.App(false){
        <div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to GoImageAi</h1>
                // @LoginForm()
			</div>
		</div>
    }
}

// type LoginErros struct {
//     Email string
//     Password string
//     InvalidCredentials string
// }

// templ LoginForm(){
//     <form
// 		hx-post="/login"
// 		hx-swap="outerHTML"
// 		class="space-y-4"
// 	>
// 		<div class="w-full">
// 			<div class="label">
// 				<span class="label-text">Email address</span>
// 			</div>
// 			<input type="email" value={ creds.Email } name="email" autocomplete="off" required placeholder="Type here" class="input input-bordered w-full"/>
// 			if len(errors.Email) > 0 {
// 				<div class="label">
// 					<span class="label-text-alt text-error">{ errors.Email }</span>
// 				</div>
// 			}
// 		</div>
// 		<div class="w-full">
// 			<div class="label">
// 				<span class="label-text">Password</span>
// 			</div>
// 			<input type="password" name="password" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full"/>
// 			if len(errors.Password) > 0 {
// 				<div class="label">
// 					<span class="label-text-alt text-error">{ errors.Password }</span>
// 				</div>
// 			}
// 		</div>
// 		if len(errors.InvalidCredentials) > 0 {
// 			<div class="text-sm text-error">{ errors.InvalidCredentials }</div>
// 		}
// 		<button type="submit" class="btn btn-primary w-full">Login <i class="fa-solid fa-arrow-right"></i></button>
// 		<div class="divider">OR</div>
// 		<a href="/login/provider/github" class="btn bg-[#000] hover:text-black text-white w-full">Login with GitHub<i class="fa-brands fa-github"></i></a>
// 	</form>
// }


templ SignUp() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Sign Up to MyApp</h1>
				@SignUpForm(SignUpParams{}, SignUpErrors{})
			</div>
		</div>
	}
}

type SignUpParams struct {
	Email string
	Password string
	ConfirmPassword string
}

type SignUpErrors struct {
	Email string
	Password string
	ConfirmPassword string
}


templ SignUpForm(params SignUpParams, errors SignUpErrors) {
	<form
		hx-post="/signup"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={ params.Email } name="email" autocomplete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Confirm Password</span>
			</div>
			<input type="password" name="confirmPassword" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.ConfirmPassword }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-primary w-full">Signup <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ SignUpSuccess(email string) {
	<div>
		A confirmation email has been sent to: <span class="font-semibold text-success"> {email} </span>
	</div>
}

templ CallbackScript() {
	<script>
		var url = window.location.href;
		var newURL = url.replace("#", "?")
		window.location = newURL
	</script>
}